// BREAKPOINTS
//==========================================================================
@mixin for-size($range) {
  $breakpoint-xs: 544px;
  $breakpoint-sm: 768px;
  $breakpoint-md: 992px;
  $breakpoint-lg: 1188px;

  @if $range == xs-down {
    @media (max-width: #{$breakpoint-xs - 1}) {
      @content;
    }
  }
  @else if $range == xs-to-sm {
    @media (min-width: $breakpoint-xs) and (max-width: #{$breakpoint-sm - 1}) {
      @content;
    }
  }
  @else if $range == sm-to-md {
    @media (min-width: $breakpoint-sm) and (max-width: #{$breakpoint-md - 1}) {
      @content;
    }
  }
  @else if $range == md-to-lg {
    @media (min-width: $breakpoint-md) and (max-width: #{$breakpoint-lg - 1}) {
      @content;
    }
  }
  @else if $range == xs-up {
    @media (min-width: $breakpoint-xs) {
      @content;
    }
  }
  @else if $range == sm-up {
    @media (min-width: $breakpoint-sm) {
      @content;
    }
  }
  @else if $range == md-up {
    @media (min-width: $breakpoint-md) {
      @content;
    }
  }
  @else if $range == lg-up {
    @media (min-width: $breakpoint-lg) {
      @content;
    }
  }
  @else if $range == xs-down {
    @media (max-width: $breakpoint-xs - 1) {
      @content;
    }
  }
  @else if $range == sm-down {
    @media (max-width: $breakpoint-sm - 1) {
      @content;
    }
  }
  @else if $range == md-down {
    @media (max-width: $breakpoint-md - 1) {
      @content;
    }
  }
  @else if $range == lg-down {
    @media (max-width: $breakpoint-lg - 1) {
      @content;
    }
  }
}

// CLEARFIX
//==========================================================================

@mixin clearfix {
  &:after {
    content: "";
    display: table;
    clear: both;
  }
}

.clearfix {
  &:after {
    content: "";
    display: table;
    clear: both;
  }
}

// TRANSITIONS
//==========================================================================

// Usage:   @include transition(width, height 0.3s ease-in-out);
// Output:  -webkit-transition(width 0.2s, height 0.3s ease-in-out);
//          transition(width 0.2s, height 0.3s ease-in-out);
//
// Pass in any number of transitions
@mixin transition($transitions...) {
  $unfoldedTransitions: ();

  @each $transition in $transitions {
    $unfoldedTransitions: append($unfoldedTransitions, unfoldTransition($transition), comma);
  }

  -webkit-transition: $unfoldedTransitions;
  transition: $unfoldedTransitions;
}

@function unfoldTransition($transition) {
  // Default values
  $property: all;
  $duration: 0.2s;
  $easing: null;

  // Browser default is ease, which is what we want
  $delay: null;

  // Browser default is 0, which is what we want
  $defaultProperties: $property, $duration, $easing, $delay;

  // Grab transition properties if they exist
  $unfoldedTransition: ();

  @for $i from 1 through length($defaultProperties) {
    $p: null;

    @if $i <= length($transition) {
      $p: nth($transition, $i);
    }
    @else {
      $p: nth($defaultProperties, $i);
    }

    $unfoldedTransition: append($unfoldedTransition, $p);
  }

  @return $unfoldedTransition;
}

// CALCULATE REM FROM PIXELS AND VICEVERSA
//==========================================================================

@function calculateRem($size) {
  $remSize: $size / 16px;
//Default font size on html element is 100%, equivalent to 16px;
  @return #{$remSize}rem;
}

@function calculatePx($size) {
  $pxSize: $size * 16;
//Default font size on html element is 100%, equivalent to 16px;
  @return #{$pxSize}px;
}

// ANIMATION
//==========================================================================

@mixin keyframes($animation-name) {
  @-webkit-keyframes #{$animation-name} {
    @content;
  }
  @keyframes #{$animation-name} {
    @content;
  }
}

@mixin animation($str) {
  -webkit-animation: #{$str};
  animation: #{$str};
}
